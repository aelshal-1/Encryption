#include "AES.h"
#include <cstring>

#pragma region constant Defintions

unsigned char _MixMatrix[4][4] = { 0x02, 0x03, 0x01, 0x01,
0x01, 0x02, 0x03, 0x01,
0x01, 0x01, 0x02, 0x03,
0x03, 0x01, 0x01, 0x02
};
unsigned char _inverseMixMatrix[4][4] = { 0x0e, 0x0b, 0x0d, 0x09,
0x09, 0x0e, 0x0b, 0x0d,
0x0d, 0x09, 0x0e, 0x0b,
0x0b, 0x0d, 0x09, 0x0e
};

unsigned char _sBox[16][16] = { 0x063, 0x07c, 0x077, 0x07b, 0x0f2, 0x06b, 0x06f, 0x0c5, 0x030, 0x001, 0x067, 0x02b, 0x0fe, 0x0d7, 0x0ab, 0x076,
0x0ca, 0x082, 0x0c9, 0x07d, 0x0fa, 0x059, 0x047, 0x0f0, 0x0ad, 0x0d4, 0x0a2, 0x0af, 0x09c, 0x0a4, 0x072, 0x0c0,
0x0b7, 0x0fd, 0x093, 0x026, 0x036, 0x03f, 0x0f7, 0x0cc, 0x034, 0x0a5, 0x0e5, 0x0f1, 0x071, 0x0d8, 0x031, 0x015,
0x004, 0x0c7, 0x023, 0x0c3, 0x018, 0x096, 0x005, 0x09a, 0x007, 0x012, 0x080, 0x0e2, 0x0eb, 0x027, 0x0b2, 0x075,
0x009, 0x083, 0x02c, 0x01a, 0x01b, 0x06e, 0x05a, 0x0a0, 0x052, 0x03b, 0x0d6, 0x0b3, 0x029, 0x0e3, 0x02f, 0x084,
0x053, 0x0d1, 0x000, 0x0ed, 0x020, 0x0fc, 0x0b1, 0x05b, 0x06a, 0x0cb, 0x0be, 0x039, 0x04a, 0x04c, 0x058, 0x0cf,
0x0d0, 0x0ef, 0x0aa, 0x0fb, 0x043, 0x04d, 0x033, 0x085, 0x045, 0x0f9, 0x002, 0x07f, 0x050, 0x03c, 0x09f, 0x0a8,
0x051, 0x0a3, 0x040, 0x08f, 0x092, 0x09d, 0x038, 0x0f5, 0x0bc, 0x0b6, 0x0da, 0x021, 0x010, 0x0ff, 0x0f3, 0x0d2,
0x0cd, 0x00c, 0x013, 0x0ec, 0x05f, 0x097, 0x044, 0x017, 0x0c4, 0x0a7, 0x07e, 0x03d, 0x064, 0x05d, 0x019, 0x073,
0x060, 0x081, 0x04f, 0x0dc, 0x022, 0x02a, 0x090, 0x088, 0x046, 0x0ee, 0x0b8, 0x014, 0x0de, 0x05e, 0x00b, 0x0db,
0x0e0, 0x032, 0x03a, 0x00a, 0x049, 0x006, 0x024, 0x05c, 0x0c2, 0x0d3, 0x0ac, 0x062, 0x091, 0x095, 0x0e4, 0x079,
0x0e7, 0x0c8, 0x037, 0x06d, 0x08d, 0x0d5, 0x04e, 0x0a9, 0x06c, 0x056, 0x0f4, 0x0ea, 0x065, 0x07a, 0x0ae, 0x008,
0x0ba, 0x078, 0x025, 0x02e, 0x01c, 0x0a6, 0x0b4, 0x0c6, 0x0e8, 0x0dd, 0x074, 0x01f, 0x04b, 0x0bd, 0x08b, 0x08a,
0x070, 0x03e, 0x0b5, 0x066, 0x048, 0x003, 0x0f6, 0x00e, 0x061, 0x035, 0x057, 0x0b9, 0x086, 0x0c1, 0x01d, 0x09e,
0x0e1, 0x0f8, 0x098, 0x011, 0x069, 0x0d9, 0x08e, 0x094, 0x09b, 0x01e, 0x087, 0x0e9, 0x0ce, 0x055, 0x028, 0x0df,
0x08c, 0x0a1, 0x089, 0x00d, 0x0bf, 0x0e6, 0x042, 0x068, 0x041, 0x099, 0x02d, 0x00f, 0x0b0, 0x054, 0x0bb, 0x016
};

unsigned char _inverseSBox[16][16] =
{
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};
unsigned char _lTable[16][16] =
{
	' ', 0x00, 0x19, 0x01, 0x32, 0x02, 0x1a, 0xc6, 0x4b, 0xc7, 0x1b, 0x68, 0x33, 0xee, 0xdf, 0x03,
	0x64, 0x04, 0xe0, 0x0e, 0x34, 0x8d, 0x81, 0xef, 0x4c, 0x71, 0x08, 0xc8, 0xf8, 0x69, 0x1c, 0xc1,
	0x7d, 0xc2, 0x1d, 0xb5, 0xf9, 0xb9, 0x27, 0x6a, 0x4d, 0xe4, 0xa6, 0x72, 0x9a, 0xc9, 0x09, 0x78,
	0x65, 0x2f, 0x8a, 0x05, 0x21, 0x0f, 0xe1, 0x24, 0x12, 0xf0, 0x82, 0x45, 0x35, 0x93, 0xda, 0x8e,
	0x96, 0x8f, 0xdb, 0xbd, 0x36, 0xd0, 0xce, 0x94, 0x13, 0x5c, 0xd2, 0xf1, 0x40, 0x46, 0x83, 0x38,
	0x66, 0xdd, 0xfd, 0x30, 0xbf, 0x06, 0x8b, 0x62, 0xb3, 0x25, 0xe2, 0x98, 0x22, 0x88, 0x91, 0x10,
	0x7e, 0x6e, 0x48, 0xc3, 0xa3, 0xb6, 0x1e, 0x42, 0x3a, 0x6b, 0x28, 0x54, 0xfa, 0x85, 0x3d, 0xba,
	0x2b, 0x79, 0x0a, 0x15, 0x9b, 0x9f, 0x5e, 0xca, 0x4e, 0xd4, 0xac, 0xe5, 0xf3, 0x73, 0xa7, 0x57,
	0xaf, 0x58, 0xa8, 0x50, 0xf4, 0xea, 0xd6, 0x74, 0x4f, 0xae, 0xe9, 0xd5, 0xe7, 0xe6, 0xad, 0xe8,
	0x2c, 0xd7, 0x75, 0x7a, 0xeb, 0x16, 0x0b, 0xf5, 0x59, 0xcb, 0x5f, 0xb0, 0x9c, 0xa9, 0x51, 0xa0,
	0x7f, 0x0c, 0xf6, 0x6f, 0x17, 0xc4, 0x49, 0xec, 0xd8, 0x43, 0x1f, 0x2d, 0xa4, 0x76, 0x7b, 0xb7,
	0xcc, 0xbb, 0x3e, 0x5a, 0xfb, 0x60, 0xb1, 0x86, 0x3b, 0x52, 0xa1, 0x6c, 0xaa, 0x55, 0x29, 0x9d,
	0x97, 0xb2, 0x87, 0x90, 0x61, 0xbe, 0xdc, 0xfc, 0xbc, 0x95, 0xcf, 0xcd, 0x37, 0x3f, 0x5b, 0xd1,
	0x53, 0x39, 0x84, 0x3c, 0x41, 0xa2, 0x6d, 0x47, 0x14, 0x2a, 0x9e, 0x5d, 0x56, 0xf2, 0xd3, 0xab,
	0x44, 0x11, 0x92, 0xd9, 0x23, 0x20, 0x2e, 0x89, 0xb4, 0x7c, 0xb8, 0x26, 0x77, 0x99, 0xe3, 0xa5,
	0x67, 0x4a, 0xed, 0xde, 0xc5, 0x31, 0xfe, 0x18, 0x0d, 0x63, 0x8c, 0x80, 0xc0, 0xf7, 0x70, 0x07
};

unsigned char _eTable[16][16] =
{
	0x01, 0x03, 0x05, 0x0f, 0x11, 0x33, 0x55, 0xff, 0x1a, 0x2e, 0x72, 0x96, 0xa1, 0xf8, 0x13, 0x35,
	0x5f, 0xe1, 0x38, 0x48, 0xd8, 0x73, 0x95, 0xa4, 0xf7, 0x02, 0x06, 0x0a, 0x1e, 0x22, 0x66, 0xaa,
	0xe5, 0x34, 0x5c, 0xe4, 0x37, 0x59, 0xeb, 0x26, 0x6a, 0xbe, 0xd9, 0x70, 0x90, 0xab, 0xe6, 0x31,
	0x53, 0xf5, 0x04, 0x0c, 0x14, 0x3c, 0x44, 0xcc, 0x4f, 0xd1, 0x68, 0xb8, 0xd3, 0x6e, 0xb2, 0xcd,
	0x4c, 0xd4, 0x67, 0xa9, 0xe0, 0x3b, 0x4d, 0xd7, 0x62, 0xa6, 0xf1, 0x08, 0x18, 0x28, 0x78, 0x88,
	0x83, 0x9e, 0xb9, 0xd0, 0x6b, 0xbd, 0xdc, 0x7f, 0x81, 0x98, 0xb3, 0xce, 0x49, 0xdb, 0x76, 0x9a,
	0xb5, 0xc4, 0x57, 0xf9, 0x10, 0x30, 0x50, 0xf0, 0x0b, 0x1d, 0x27, 0x69, 0xbb, 0xd6, 0x61, 0xa3,
	0xfe, 0x19, 0x2b, 0x7d, 0x87, 0x92, 0xad, 0xec, 0x2f, 0x71, 0x93, 0xae, 0xe9, 0x20, 0x60, 0xa0,
	0xfb, 0x16, 0x3a, 0x4e, 0xd2, 0x6d, 0xb7, 0xc2, 0x5d, 0xe7, 0x32, 0x56, 0xfa, 0x15, 0x3f, 0x41,
	0xc3, 0x5e, 0xe2, 0x3d, 0x47, 0xc9, 0x40, 0xc0, 0x5b, 0xed, 0x2c, 0x74, 0x9c, 0xbf, 0xda, 0x75,
	0x9f, 0xba, 0xd5, 0x64, 0xac, 0xef, 0x2a, 0x7e, 0x82, 0x9d, 0xbc, 0xdf, 0x7a, 0x8e, 0x89, 0x80,
	0x9b, 0xb6, 0xc1, 0x58, 0xe8, 0x23, 0x65, 0xaf, 0xea, 0x25, 0x6f, 0xb1, 0xc8, 0x43, 0xc5, 0x54,
	0xfc, 0x1f, 0x21, 0x63, 0xa5, 0xf4, 0x07, 0x09, 0x1b, 0x2d, 0x77, 0x99, 0xb0, 0xcb, 0x46, 0xca,
	0x45, 0xcf, 0x4a, 0xde, 0x79, 0x8b, 0x86, 0x91, 0xa8, 0xe3, 0x3e, 0x42, 0xc6, 0x51, 0xf3, 0x0e,
	0x12, 0x36, 0x5a, 0xee, 0x29, 0x7b, 0x8d, 0x8c, 0x8f, 0x8a, 0x85, 0x94, 0xa7, 0xf2, 0x0d, 0x17,
	0x39, 0x4b, 0xdd, 0x7c, 0x84, 0x97, 0xa2, 0xfd, 0x1c, 0x24, 0x6c, 0xb4, 0xc7, 0x52, 0xf6, 0x01
};

unsigned char RConstant[10][4] = {
	0x01, 0x00, 0x00, 0x00,
	0x02, 0x00, 0x00, 0x00,
	0x04, 0x00, 0x00, 0x00,
	0x08, 0x00, 0x00, 0x00,
	0x10, 0x00, 0x00, 0x00,
	0x20, 0x00, 0x00, 0x00,
	0x40, 0x00, 0x00, 0x00,
	0x80, 0x00, 0x00, 0x00,
	0x1b, 0x00, 0x00, 0x00,
	0x36, 0x00, 0x00, 0x00,
};

#define WHITESPACE 64
#define EQUALS     65
#define INVALID    66

static const unsigned char d[] = {
	66, 66, 66, 66, 66, 66, 66, 66, 66, 64, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 62, 66, 66, 66, 63, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 66, 66, 66, 65, 66, 66, 66, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 66, 66, 66, 66, 66, 66, 26, 27, 28,
	29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66
};
#pragma endregion

AES::AES()
{
	memset(_currentMatrix, 0, sizeof(_currentMatrix));
	memset(RoundsKeys, 0, sizeof(RoundsKeys));
}

int AES::Hex2Dec(char Hex)
{
	switch (Hex)
	{
	case '0':
		return 0;
	case '1':
		return 1;
	case '2':
		return 2;
	case '3':
		return 3;
	case '4':
		return 4;
	case '5':
		return 5;
	case '6':
		return 6;
	case '7':
		return 7;
	case '8':
		return 8;
	case '9':
		return 9;
	case 'A':
	case 'a':
		return 10;
	case 'B':
	case 'b':
		return 11;
	case 'C':
	case 'c':
		return 12;
	case 'D':
	case 'd':
		return 13;
	case 'E':
	case 'e':
		return 14;
	case 'F':
	case 'f':
		return 15;
	default:
		break;
	}
	return 0;
}

int  AES::Sum2Hex(unsigned char Hex1, unsigned char Hex2)
{
	char str[2 + 1];
	memset(str, 0, sizeof(str));

	sprintf(str, "%x", Hex1);
	int h1 = strtol(str, NULL, 16);

	memset(str, 0, sizeof(str));
	sprintf(str, "%x", Hex2);
	int h2 = strtol(str, NULL, 16);

	int sum = h1 + h2;
	if (sum > 255)
		sum -= 255;

	return sum;

}

void AES::Keygenration(unsigned char* Key)
{
	int count = 0;
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			RoundsKeys[0]._roundKes[j][i] = Key[count++];
		}
	}

	count = 0;
	while (count < 10)
	{
#pragma region  get Last Key COl

		unsigned char LastKeyCol[4];
		memset(LastKeyCol, 0, sizeof(LastKeyCol));
		for (int i = 0; i < 4; i++)
		{
			LastKeyCol[i] = RoundsKeys[count]._roundKes[i][3];
		}

#pragma endregion

#pragma region Rotate left on byte

		unsigned char temp = LastKeyCol[0];
		for (int i = 0; i < 3; i++)
		{
			LastKeyCol[i] = LastKeyCol[i + 1];
		}
		LastKeyCol[3] = temp;

#pragma endregion

#pragma region Substitue

		for (int i = 0; i < 4; i++)
		{
			char str[2 + 1];
			memset(str, 0, sizeof(str));
			sprintf(str, "%x", LastKeyCol[i]);
			if (strlen(str) == 1)
			{
				str[1] = str[0];
				str[0] = '0';
			}
			int _row = Hex2Dec(str[0]);
			int _col = Hex2Dec(str[1]);
			LastKeyCol[i] = _sBox[_row][_col];
		}

#pragma endregion

#pragma region XOR with Round Constant

		for (int i = 0; i < 4; i++)
		{
			LastKeyCol[i] = LastKeyCol[i] ^ RConstant[count][i];
		}

#pragma endregion

#pragma region get first Key COl

		unsigned char firstKeyCol[4];
		for (int i = 0; i < 4; i++)
		{
			firstKeyCol[i] = RoundsKeys[count]._roundKes[i][0];
		}

#pragma endregion

#pragma region XOR with first col key

		for (int i = 0; i < 4; i++)
		{
			RoundsKeys[count + 1]._roundKes[i][0] = LastKeyCol[i] ^ firstKeyCol[i];
		}

#pragma endregion

#pragma region fill new key

		for (int i = 1; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				RoundsKeys[count + 1]._roundKes[j][i] = RoundsKeys[count]._roundKes[j][i] ^ RoundsKeys[count + 1]._roundKes[j][i - 1];
			}
		}

#pragma endregion

		count++;
	}

}


void AES::AddRoundKey(int RoundNum)
{
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			_currentMatrix[i][j] = _currentMatrix[i][j] ^ RoundsKeys[RoundNum]._roundKes[i][j];
		}
	}

}
void AES::SubstituteByte()
{
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			char str[2 + 1];
			memset(str, 0, sizeof(str));
			sprintf(str, "%x", _currentMatrix[i][j]);
			if (strlen(str) == 1)
			{
				str[1] = str[0];
				str[0] = '0';
			}
			int _row = Hex2Dec(str[0]);
			int _col = Hex2Dec(str[1]);
			_currentMatrix[i][j] = _sBox[_row][_col];
		}
	}
}

void AES::inverseSubstituteByte()
{
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			char str[2 + 1];
			memset(str, 0, sizeof(str));
			sprintf(str, "%x", _currentMatrix[i][j]);
			if (strlen(str) == 1)
			{
				str[1] = str[0];
				str[0] = '0';
			}
			int _row = Hex2Dec(str[0]);
			int _col = Hex2Dec(str[1]);
			_currentMatrix[i][j] = _inverseSBox[_row][_col];
		}
	}
}
void AES::ShiftRows()
{
	unsigned char _temp[4][4];
	memset(_temp, 0, sizeof(_temp));
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			int col = (j + i) % 4;
			_temp[i][j] = _currentMatrix[i][col];
		}
	}

	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			_currentMatrix[i][j] = _temp[i][j];
		}
	}
}

void AES::inverseShiftRows()
{
	unsigned char _temp[4][4];
	memset(_temp, 0, sizeof(_temp));
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			int col = (j - i + 4) % 4;
			_temp[i][j] = _currentMatrix[i][col];
		}
	}

	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			_currentMatrix[i][j] = _temp[i][j];
		}
	}
}

void AES::MixCols()
{
	unsigned char _MixMatrix2[4][4];
	memset(_MixMatrix2, 0, sizeof(_MixMatrix2));
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			int index = 0;
			unsigned char t[100];
			memset(t, 0, sizeof(t));
			unsigned char result = 0;
			for (int k = 0; k < 4; k++)
			{

				char str[2 + 1];
				memset(str, 0, sizeof(str));

				sprintf(str, "%x", _MixMatrix[i][k]);
				if (strlen(str) == 1)
				{
					str[1] = str[0];
					str[0] = '0';
				}
				if (strcmp(str, "00") == 0)
					continue;
				int row1 = Hex2Dec(str[0]);
				int col1 = Hex2Dec(str[1]);
				unsigned char n1 = _lTable[row1][col1];

				memset(str, 0, sizeof(str));
				sprintf(str, "%x", _currentMatrix[k][j]);
				if (strlen(str) == 1)
				{
					str[1] = str[0];
					str[0] = '0';
				}
				if (strcmp(str, "00") == 0)
					continue;
				row1 = Hex2Dec(str[0]);
				col1 = Hex2Dec(str[1]);
				unsigned char n2 = _lTable[row1][col1];

				/*if (n1 == ' ' || n2 == ' ')
				continue;*/
				unsigned char E = Sum2Hex(n1, n2);
				/*if (E.Length == 1)
				{
				E = "0" + E;
				}*/
				memset(str, 0, sizeof(str));
				sprintf(str, "%x", E);
				if (strlen(str) == 1)
				{
					str[1] = str[0];
					str[0] = '0';
				}
				row1 = Hex2Dec(str[0]);
				col1 = Hex2Dec(str[1]);
				t[index++] = _eTable[row1][col1];

			}
			if (index == 3)
				t[index] = 0x00;
			result = t[0] ^ t[1] ^ t[2] ^ t[3];
			//result = Binary2Hex(result);
			//t.Clear();
			_MixMatrix2[i][j] = result;
		}
	}

	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			_currentMatrix[i][j] = _MixMatrix2[i][j];
		}
	}
}

void AES::inverseMixCols()
{
	unsigned char _MixMatrix2[4][4];
	memset(_MixMatrix2, 0, sizeof(_MixMatrix2));
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			int index = 0;
			unsigned char t[100];
			memset(t, 0, sizeof(t));
			unsigned char result = 0;
			for (int k = 0; k < 4; k++)
			{

				char str[2 + 1];
				memset(str, 0, sizeof(str));

				sprintf(str, "%x", _inverseMixMatrix[i][k]);
				if (strlen(str) == 1)
				{
					str[1] = str[0];
					str[0] = '0';
				}
				if (strcmp(str, "00") == 0)
					continue;
				int row1 = Hex2Dec(str[0]);
				int col1 = Hex2Dec(str[1]);
				unsigned char n1 = _lTable[row1][col1];

				memset(str, 0, sizeof(str));
				sprintf(str, "%x", _currentMatrix[k][j]);
				if (strlen(str) == 1)
				{
					str[1] = str[0];
					str[0] = '0';
				}
				if (strcmp(str, "00") == 0)
					continue;
				row1 = Hex2Dec(str[0]);
				col1 = Hex2Dec(str[1]);
				unsigned char n2 = _lTable[row1][col1];

				/*if (n1 == ' ' || n2 == ' ')
				continue;*/
				unsigned char E = Sum2Hex(n1, n2);
				/*if (E.Length == 1)
				{
				E = "0" + E;
				}*/
				memset(str, 0, sizeof(str));
				sprintf(str, "%x", E);
				if (strlen(str) == 1)
				{
					str[1] = str[0];
					str[0] = '0';
				}
				row1 = Hex2Dec(str[0]);
				col1 = Hex2Dec(str[1]);
				t[index++] = _eTable[row1][col1];

			}
			if (index == 3)
				t[index] = 0x00;
			result = t[0] ^ t[1] ^ t[2] ^ t[3];
			//result = Binary2Hex(result);
			//t.Clear();
			_MixMatrix2[i][j] = result;
		}
	}

	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			_currentMatrix[i][j] = _MixMatrix2[i][j];
		}
	}
}

void AES::Round(int index)
{
	if (index == 10)
	{
		SubstituteByte();
		ShiftRows();
		AddRoundKey(index);
		return;
	}
	SubstituteByte();
	ShiftRows();
	MixCols();
	AddRoundKey(index);
}

void AES::InverseRound(int index)
{
	if (index == 0)
	{
		inverseShiftRows();
		inverseSubstituteByte();
		AddRoundKey(index);
		return;
	}
	inverseShiftRows();
	inverseSubstituteByte();
	AddRoundKey(index);
	inverseMixCols();
}







std::string AES::encrypt(const std::string& data){
    unsigned char key[] = { 0x0F, 0x15, 0x71, 0xc9, 0x47, 0xd9, 0xe8, 0x59, 0x0C, 0xb7, 0xad, 0xd6, 0xaf, 0x7F, 0x67, 0x98 };
   
	std::string CT = "";
	int padding = 0;
	int len = data.size();
	int index = 0;
	do {
		std::string PT = "";
		if (len > 16) {
			PT = data.substr(index, 16);
			index += 16;
			len -= 16;
		}
		else {
			PT = data.substr(index);
			padding = PT.size() % 16;
			
			for (int i = padding; i < 16; i++) {
				PT += "F";
			}
			
			len = 0;
		}

		Keygenration(key);

#pragma region Fill PT Matrix
		int count = 0;
		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				_currentMatrix[j][i] = static_cast<unsigned char> (PT[count++]);
			}
		}
#pragma endregion

		AddRoundKey(0);
		for (int i = 0; i < 10; i++) {
			Round(i + 1);
		}

		//int index = 0;

		for (int j = 0; j < 4; j++)
		{
			for (int i = 0; i < 4; i++)
			{
				CT += _currentMatrix[i][j];
			}
		}

	} while (len > 0);
	
	
    return CT;
}

std::string AES::decrypt(const std::string& data){
    unsigned char key[] = { 0x0F, 0x15, 0x71, 0xc9, 0x47, 0xd9, 0xe8, 0x59, 0x0C, 0xb7, 0xad, 0xd6, 0xaf, 0x7F, 0x67, 0x98 };


	std::string PT = "";
	int padding = 0;
	int len = data.size();
	int index = 0;
	do {
		std::string CT = "";
		if (len > 16) {
			CT = data.substr(index, 16);
			index += 16;
			len -= 16;
		}
		else {
			CT = data.substr(index);
			

			len = 0;
		}
		Keygenration(key);
#pragma region Fill PT Matrix

		int count = 0;
		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				_currentMatrix[j][i] = static_cast<unsigned char>(CT[count++]);
			}
		}

#pragma endregion

		AddRoundKey(10);
		for (int i = 10; i > 1; i--)
		{
			InverseRound(i - 1);
		}
		inverseShiftRows();
		inverseSubstituteByte();
		AddRoundKey(0);



		for (int j = 0; j < 4; j++)
		{
			for (int i = 0; i < 4; i++)
			{
				PT += _currentMatrix[i][j];
			}
		}
	} while (len > 0);
    
	int count = 0;
	for(int i= PT.size()-1;i>=0;i--){
		if (PT[i] == '}')
			break;
		count++;
	}
	return PT.substr(0, PT.size() - count);
}

